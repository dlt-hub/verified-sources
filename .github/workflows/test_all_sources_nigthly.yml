
name: test all sources (postgres and duckdb)

on:
  schedule:
  - cron: 0 0 * * *
env:
  ALL_DESTINATIONS: '["postgres", "duckdb"]'
  DLT_SECRETS_TOML: ${{ secrets.DLT_SECRETS_TOML }}
  RUNTIME__LOG_LEVEL: ERROR

jobs:
  run_loader:
    name: test all sources (postgres and duckdb)
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        os: ["macos-latest", "windows-latest"]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out
        uses: actions/checkout@master

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.9.x"

      - name: Install Poetry
        uses: snok/install-poetry@v1.3.2
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          # path: ${{ steps.pip-cache.outputs.dir }}
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-destinations

      - name: Install dependencies
        # if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --all-extras

      - name: create secrets.toml
        run: pwd && echo "$DLT_SECRETS_TOML" > sources/.dlt/secrets.toml

      - run: poetry run pytest tests
        if: runner.os != 'Windows'
        name: Run tests on Linux/macOS

      - run: poetry run pytest tests
        if: runner.os == 'Windows'
        name: Run tests on Windows
        shell: cmd
