
name: test redshift, postgres and duckdb

on:
  pull_request:
    branches:
      - master
      - devel
  workflow_dispatch:

env:
  ALL_DESTINATIONS: '["postgres", "duckdb"]'
  DESTINATIONS_SECRETS: ${{ secrets.DESTINATIONS_SECRETS }}
  SOURCES_SECRETS: ${{ secrets.SOURCES_SECRETS }}
  RUNTIME__LOG_LEVEL: ERROR

jobs:

  run_loader:
    name: test destinations redshift, postgres and duckdb
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}

    steps:

      - name: Check out
        uses: actions/checkout@master
        with:
          fetch-depth: 0

      - name: Get changed pipelines
        id: get_changed_pipelines
        run: |
          set -x
          echo "base.sha: ${{ github.event.pull_request.base.sha }} head.sha:${{ github.event.pull_request.head.sha }}"
          git_diff=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "Command status: $?"
          echo $git_diff
          changed_pipelines=$(
            git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} \
              | grep '^pipelines/' \
              | sed -E 's/^pipelines\/([^/]+)\/[^/]+$/\1/; s/^pipelines\/(.*)_pipeline\.py$/\1/' \
              | sort -u \
              | tr '\n' ' '
          )
          echo $?
          echo "Changed pipelines: $changed_pipelines"
          echo "pipelines_list=$changed_pipelines" >> $GITHUB_OUTPUT

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.9.x"

      - name: Install Poetry
        uses: snok/install-poetry@v1.3.2
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          # path: ${{ steps.pip-cache.outputs.dir }}
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-destinations

      - name: Install dependencies
        # if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --all-extras

      - name: create secrets.toml
        run: pwd && echo "$DESTINATIONS_SECRETS" > pipelines/.dlt/secrets.toml && echo "$SOURCES_SECRETS" >> pipelines/.dlt/secrets.toml
      # - name: Setup upterm session
      #   uses: lhotari/action-upterm@v1
      - run: |
          poetry run pytest $(echo ${{ steps.get_changed_pipelines.outputs.pipelines_list }} | awk '{for(i=1;i<=NF;i++) printf "tests/%s ", $i}')
        if: runner.os != 'Windows'
        name: Run tests/chess Linux/MAC
      - run: |
          poetry run pytest tests
        if: runner.os == 'Windows'
        name: Run tests/chess Windows
        shell: cmd
