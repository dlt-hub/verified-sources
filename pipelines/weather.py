# -*- coding: utf-8 -*-
"""Copy of updatedweatherdatanewapi2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vbZ_a-yfluBgEcVHtP4Ia7YAp0c9B6MH
"""



import dlt
import datetime as dt
import requests
import time
from datetime import timedelta
from geopy.geocoders import Nominatim


"""Create a pipeline for fetching historic weather data of a Location using an open API """

pipeline = dlt.pipeline(pipeline_name="weather_pipeline", destination="duckdb", dataset_name="weather", full_refresh=True)
# configure the pipeline: provide the destination and dataset name to which the data should go

@dlt.resource(write_disposition="append")
def get_data(diff=None):
  today_date= dt.date.today()
  date_since=today_date-dt.timedelta(days=diff)
  date_since_str=date_since.strftime("%Y-%m-%d")
  print(f"User Requested Data from date since {date_since_str}")
  loaded_date = dlt.current.state().setdefault("updated_date",date_since_str)
  print(f"Requested Date {today_date}")
  loaded_date = dt.datetime.strptime(loaded_date, "%Y-%m-%d").date()
  delta = today_date - loaded_date  #calculating the pendings days to fetch the data from last updated date
  print(f"difference days from last loaded data from User requested date {delta.days}")
  geolocator = Nominatim(user_agent="dlt") 
  print("Enter your city name : Berlin")  # Passing the City name of the loaction and fetching its geographic details like latitude and longitude
  location=geolocator.geocode("Berlin")  # Defaultly we set Berlin as city, for incremental loading purpose. 
  """If user need to pass the location there is option for inputing city name. But incremental Loading will come only in next update """
  #location = geolocator.geocode(input("Enter your City Name "))
  print(location.address)
  print((location.latitude, location.longitude))
  lat=location.latitude
  lon=location.longitude
  print("Getting data from:- %s to %s" %(loaded_date, today_date))
  data=requests.get(f'https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&hourly=temperature_2m&forecast_days=1&past_days={delta.days}').json()
  # Fetching data through an open API with passing lat,lon and no of historic days. 
  dlt.current.state()["updated_date"]  = dt.date.today()  # update todays date to updated date for state
  yield data

diff=int(input("Enter the past days"))      #passing the no of past days of weather data need to fetch

info = pipeline.run(get_data(diff), table_name="weatherdata") 
    # run the pipeline for getting data and the load it 


print (info)
    #printing the status and information of Load package

