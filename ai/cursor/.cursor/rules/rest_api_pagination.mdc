---
description: Use this when you are running into issues with incremental configs
globs: 
alwaysApply: false
---

# dlt REST API Pagination Configuration Guide

This rule explains how to configure different pagination strategies for the `dlt` `rest_api` source. Understanding the API's specific pagination method is crucial for correct configuration.

If you are unsure what type of pagination to use due to lack of information from the api, consider curl-ing for responses (you can probably find credentials in secrets if needed)

We will use class based paginators and not declartive so if you search online in dlthub docs, make sure you do the right type

**Key Principle: Endpoint-Specific Pagination**

While you can set a default paginator at the `client` level, many APIs use *different* pagination methods for different endpoints. Always check the documentation for *each specific endpoint* you intend to load.

If an endpoint uses a different pagination method than the default, define its `paginator` configuration within that specific resource's `endpoint` section to override the client-level setting.
DLT RESTClient Paginators Guide
This guide documents six paginator classes available in DLT's RESTClient for handling common API pagination patterns. For each paginator, we provide the import path, constructor parameters, a usage example, and guidance on when to use it based on API response structure.
JSONLinkPaginator
Description: Paginator for APIs where the next page’s URL is included in the response JSON body (e.g. in a field like "next" or within a "pagination" object)​
dlthub.com
.
Import Path
python
Copy
from dlt.sources.helpers.rest_client.paginators import JSONLinkPaginator
(Ensure you have dlt installed and imported in your environment.)
Parameters
next_url_path (str, optional): JSONPath to the key in the response JSON that contains the next page URL​
dlthub.com
. Defaults to "next" if not specified.
Implementation Example
python
Copy
from dlt.sources.helpers.rest_client import RESTClient
from dlt.sources.helpers.rest_client.paginators import JSONLinkPaginator

# Instantiate RESTClient with JSONLinkPaginator
client = RESTClient(
    base_url="https://api.example.com",
    paginator=JSONLinkPaginator(next_url_path="pagination.next")  # JSON key path for next page URL
)

# Paginate through an endpoint
for page in client.paginate("/posts"):
    print(page)  # each page is a response batch
In this example, the paginator will look for response_json["pagination"]["next"] in each response to get the next page’s URL​
dlthub.com
.
When to Use
Use JSONLinkPaginator when the API’s JSON response includes a direct link (URL) to the next page of results​
dlthub.com
. A common pattern is a field such as "next" or a nested key that holds the full URL for the next page. For example, an API might return a JSON structure like:
json
Copy
{
  "data": [ ... ],
  "pagination": {
    "next": "https://api.example.com/posts?page=2"
  }
}
In the above, the "pagination.next" field provides the URL for the next page​
dlthub.com
. By specifying next_url_path="pagination.next", the JSONLinkPaginator will extract that URL and request the next page automatically. This paginator is appropriate whenever the response body itself contains the next page URL, often indicated by keys like "next", "next_url", or a pagination object with a next link.
HeaderLinkPaginator
Description: Paginator for APIs where the next page’s URL is provided in an HTTP header (commonly the Link header with rel="next")​
dlthub.com
.
Import Path
python
Copy
from dlt.sources.helpers.rest_client.paginators import HeaderLinkPaginator
Parameters
links_next_key (str, optional): The relation key in the Link response header that identifies the next page’s URL​
dlthub.com
. Default is "next". Example: If the header is Link: <https://api.example.com/items?page=2>; rel="next", the default links_next_key="next" will capture the URL for the next page.
Implementation Example
python
Copy
from dlt.sources.helpers.rest_client import RESTClient
from dlt.sources.helpers.rest_client.paginators import HeaderLinkPaginator

# Instantiate RESTClient with HeaderLinkPaginator
client = RESTClient(
    base_url="https://api.example.com",
    paginator=HeaderLinkPaginator()  # uses "next" relation in Link header by default
)

for page in client.paginate("/items"):
    process_page(page)  # replace with actual handling logic
In this example, the paginator will inspect the HTTP response headers for a Link entry with rel="next", and use the corresponding URL for subsequent requests​
dlthub.com
.
When to Use
Use HeaderLinkPaginator when the API provides pagination links via HTTP headers rather than in the JSON body. This is common in APIs (like GitHub’s) that return a Link header containing URLs for next/prev pages. For example, an HTTP response might include:
bash
Copy
Link: <https://api.example.com/items?page=2>; rel="next"
Link: <https://api.example.com/items?page=5>; rel="last"
In such cases, the HeaderLinkPaginator will parse the Link header, find the URL tagged with rel="next", and follow it​
dlthub.com
. You should use this paginator if the API documentation or responses indicate that pagination is controlled by header links. (Typically, look for a header named “Link” or similar, with URIs and relation types.) Note: By default, links_next_key="next" works for standard cases. If an API uses a different relation name in the Link header, you can specify that (e.g. HeaderLinkPaginator(links_next_key="pagination-next")).
OffsetPaginator
Description: Paginator for APIs that use numeric offset/limit parameters in query strings to paginate results​
dlthub.com
. Each request fetches a set number of items (limit), and subsequent requests use an increasing offset.
Import Path
python
Copy
from dlt.sources.helpers.rest_client.paginators import OffsetPaginator
Parameters
limit (int, required): The maximum number of items to retrieve per request (page size)​
dlthub.com
.
offset (int, optional): The starting offset for the first request​
dlthub.com
. Defaults to 0 (beginning of dataset).
offset_param (str, optional): Query parameter name for the offset value​
dlthub.com
. Default is "offset".
limit_param (str, optional): Query parameter name for the page size limit​
dlthub.com
. Default is "limit".
total_path (str or None, optional): JSONPath to the total number of items in the response. If provided, it helps determine when to stop pagination based on total count​
dlthub.com
. By default this is "total", assuming the response JSON has a field "total" for total item count. Use None if the API doesn’t return a total.
maximum_offset (int, optional): A cap on the maximum offset to reach​
dlthub.com
. If set, pagination stops when offset >= maximum_offset + limit.
stop_after_empty_page (bool, optional): Whether to stop when an empty page (no results) is encountered​
dlthub.com
. Defaults to True. If True, the paginator will halt as soon as a request returns zero items (useful for APIs that don’t provide a total count).
Implementation Example
python
Copy
from dlt.sources.helpers.rest_client import RESTClient
from dlt.sources.helpers.rest_client.paginators import OffsetPaginator

# Example: Paginate with offset & limit, assuming the API returns a "total" count in JSON
client = RESTClient(
    base_url="https://api.example.com",
    paginator=OffsetPaginator(
        limit=100,          # fetch 100 items per page
        offset=0,           # start at the beginning
        total_path="total"  # the JSON key with total count of items
    )
)

for page in client.paginate("/items"):
    handle_items(page["items"])
This will request /items?offset=0&limit=100, then /items?offset=100&limit=100, and so on, until all items are retrieved (determined by the "total" count or an empty page)​
dlthub.com
​
dlthub.com
. To illustrate, if the first response looks like:
json
Copy
{
  "items": [ ... ],
  "total": 1000
}
the paginator knows there are 1000 total items​
dlthub.com
 and will continue until the offset reaches 1000 (or the final partial page). If the API does not provide a total count, OffsetPaginator will rely on getting an empty result page to stop by default​
dlthub.com
. You can also set maximum_offset to limit the number of items fetched (e.g., for testing, or if the API has an implicit max).
When to Use
Use OffsetPaginator for APIs that use offset-based pagination. Indicators include endpoint documentation or query parameters like offset (or skip/start) and limit(orpage_size`), and often a field in the response that gives the total count of items. For example, an API endpoint might be called as:
pgsql
Copy
GET https://api.example.com/items?offset=0&limit=100
and return data with a structure like:
json
Copy
{
  "items": [ ... ],
  "total": 1000
}
Here, the presence of offset/limit parameters and a "total" count in the JSON indicates offset-based pagination​
dlthub.com
​
dlthub.com
. Choose OffsetPaginator when you see this pattern. This paginator will automatically increase the offset by the given limit each time, until it either reaches the total count (if known) or encounters an empty result set (if stop_after_empty_page=True). If the API lacks a total count and can continuously scroll, ensure you provide a stopping condition (like maximum_offset) or rely on an empty page to avoid infinite pagination.
PageNumberPaginator
Description: Paginator for APIs that use page number indexing in their queries (e.g. page=1, page=2, ... in the URL)​
dlthub.com
. It increments the page number on each request.
Import Path
python
Copy
from dlt.sources.helpers.rest_client.paginators import PageNumberPaginator
Parameters
base_page (int, optional): The starting page index as expected by the API​
dlthub.com
. This defines what number represents the first page (commonly 0 or 1). Default is 0.
page (int, optional): The page number for the first request. If not provided, it defaults to the value of base_page​
dlthub.com
. (Typically you either use base_page to set the start, or directly give an initial page number.)
page_param (str, optional): The query parameter name used for the page number​
dlthub.com
. Default is "page".
total_path (str or None, optional): JSONPath to the total number of pages (or total items) in the response​
dlthub.com
. If the API provides a total page count or total item count, you can specify its JSON field (e.g. "total_pages"). Defaults to "total" (common key for total count)​
dlthub.com
. If set to None or not present, the paginator will rely on other stopping criteria.
maximum_page (int, optional): The maximum page number to request​
dlthub.com
. If provided, pagination will stop once this page is reached (useful to limit page count during testing or to avoid excessive requests).
stop_after_empty_page (bool, optional): Whether to stop when an empty page is encountered (no results)​
dlthub.com
. Default is True. If False, you should ensure there is another stop condition (like total_path or maximum_page) to prevent infinite loops.
Implementation Example
python
Copy
from dlt.sources.helpers.rest_client import RESTClient
from dlt.sources.helpers.rest_client.paginators import PageNumberPaginator

# Example: Paginate by page number, assuming API returns total_pages in response
client = RESTClient(
    base_url="https://api.example.com",
    paginator=PageNumberPaginator(
        base_page=1,           # API expects 1-indexed pages
        page_param="page",     # (default) query param name
        total_path="total_pages"  # JSON field that contains total number of pages
    )
)

for page in client.paginate("/items"):
    use_items(page["items"])
This will request /items?page=1, then /items?page=2, etc., until the last page is reached. In the above setup, if the API’s JSON response contains "total_pages": N, the paginator will stop after page N automatically​
dlthub.com
. For example, if a response is:
json
Copy
{
  "items": [ ... ],
  "total_pages": 10
}
the paginator knows there are 10 pages in total​
dlthub.com
 and will not go beyond that. If the API does not provide a total count of pages, PageNumberPaginator will paginate until an empty result page is returned by default​
dlthub.com
. You can also manually limit pages by maximum_page if needed (e.g., stop after page 5). Setting stop_after_empty_page=False can force it to continue even through empty pages, but then you must have a total_path or maximum_page to avoid infinite loops​
dlthub.com
.
When to Use
Use PageNumberPaginator for APIs that indicate pagination through a page number parameter. Clues include endpoints documented like /resource?page=1, /resource?page=2, etc., or the presence of terms like "page" or "page_number" in the API docs. Often, the response will include something like a "total_pages" field or a "page" field in the payload to help manage pagination. For example:
nginx
Copy
GET https://api.example.com/items?page=1
Response:
json
Copy
{
  "items": [ ... ],
  "total_pages": 10,
  "page": 1
}
In this scenario, the presence of "page" in the request and a total count of pages in the response suggests using a page-number-based paginator​
dlthub.com
. Choose PageNumberPaginator when the API paginates by page index. It will increment the page number on each call. Be mindful of whether the first page is indexed as 0 or 1 in that API (set base_page accordingly). If a total page count is given (e.g., "total_pages" or "last_page"), pass the appropriate JSON path via total_path so the paginator knows when to stop. If no total count is given, the paginator will stop when no more data is returned (or when you hit a maximum_page if you set one).
JSONResponseCursorPaginator
Description: Paginator for APIs that use a cursor or token in the JSON response to indicate the next page. The next cursor value is extracted from the response body and passed as a query parameter in the subsequent request​
dlthub.com
​
dlthub.com
.
Import Path
python
Copy
from dlt.sources.helpers.rest_client.paginators import JSONResponseCursorPaginator
Parameters
cursor_path (str, optional): JSONPath to the cursor/token in the response JSON​
dlthub.com
. Defaults to "cursors.next", which corresponds to a common pattern where the JSON has a "cursors" object with a "next" field.
cursor_param (str, optional): The name of the query parameter to send the cursor in for the next request​
dlthub.com
. Defaults to "after". This is the parameter that the API expects on the URL (or body) to fetch the next page (for example, many APIs use ?after=<token> or ?cursor=<token> in the query string).
Implementation Example
python
Copy
from dlt.sources.helpers.rest_client import RESTClient
from dlt.sources.helpers.rest_client.paginators import JSONResponseCursorPaginator

# Example: Paginate using a cursor from JSON response
client = RESTClient(
    base_url="https://api.example.com",
    paginator=JSONResponseCursorPaginator(
        cursor_path="paging.next_cursor",  # JSON field path for the next cursor token
        cursor_param="cursor"              # query parameter name expected by API
    )
)

for page in client.paginate("/data"):
    process_records(page["records"])
In this example, the paginator will look for response_json["paging"]["next_cursor"] in each response to get the cursor token, and include that as ?cursor=<token> in the next request’s URL. (We overrode the defaults to match an imaginary API where the JSON has paging.next_cursor and the endpoint expects a cursor parameter.)
When to Use
Use JSONResponseCursorPaginator when the API provides a continuation token or cursor in the JSON response rather than a direct URL. This is common in APIs where responses include a field like "next_cursor", "next_page_token", or a nested structure for cursors. For example, a response might look like:
json
Copy
{
  "records": [ ... ],
  "cursors": {
    "next": "cursor_string_for_next_page"
  }
}
dlthub.com
In this case, the value "cursor_string_for_next_page" is a token that the client must send in the next request to get the following page of results. The documentation might say something like “use the next cursor from the response for the next page, via a cursor query parameter.” Indicators for this paginator:
The presence of a field in the JSON that looks like a cryptic token (often base64 or long string) for pagination.
API docs using terminology like “cursor”, “continuation token”, “next token”, or showing request examples with parameters such as after, nextToken, cursor, etc.
Choose JSONResponseCursorPaginator if the API’s pagination is driven by such tokens in the response body. You will configure cursor_path to point at the JSON field containing the token (e.g. "cursors.next" as default, or "next_cursor", etc.), and cursor_param to the name of the query parameter the API expects (commonly "cursor" or "after"). The paginator will then automatically extract the token and append it as ?cursor=<token> (or your specified param name) on subsequent calls​
dlthub.com
​
dlthub.com
.
HeaderCursorPaginator
Description: Paginator for APIs that include a cursor or token for the next page in an HTTP header of the response, instead of in the JSON body​
dlthub.com
. The token from the header is used as a query parameter in the next request.
Import Path
python
Copy
from dlt.sources.helpers.rest_client.paginators import HeaderCursorPaginator
Parameters
cursor_key (str, optional): The name of the HTTP response header that contains the next-page cursor token​
dlthub.com
. Defaults to "next". For example, if the API sends a header NextPageToken: <token>, you would set cursor_key="NextPageToken".
cursor_param (str, optional): The query parameter name to use for the cursor token in the next request​
dlthub.com
. Defaults to "cursor". This is the name of the parameter to be appended to the URL (e.g. ?cursor=<token>) when fetching subsequent pages.
Implementation Example
python
Copy
from dlt.sources.helpers.rest_client import RESTClient
from dlt.sources.helpers.rest_client.paginators import HeaderCursorPaginator

# Example: Paginate using a cursor token from response headers
client = RESTClient(
    base_url="https://api.example.com",
    paginator=HeaderCursorPaginator(cursor_key="NextPageToken")  # header name that carries the token
)

for page in client.paginate("/items"):
    process(page)
In this code, after each request, HeaderCursorPaginator will check the response headers for NextPageToken (as we configured). If found, it will use the value of that header as the cursor parameter in the next request’s URL.
When to Use
Use HeaderCursorPaginator when the continuation token for pagination is delivered via an HTTP header rather than in the response body. You might see this if API documentation mentions a special header like “X-Next-Token”, “NextPageToken”, or similar, that clients should use to get the next page. For example, an API response might include:
css
Copy
HTTP/1.1 200 OK
Content-Type: application/json
NextPageToken: n3xtp4g3

[ { "id": 1, ... }, { "id": 2, ... }, ... ]
dlthub.com
In this scenario, the header NextPageToken: n3xtp4g3 provides the token for the next page. The client must send this token in the next request, typically as a query parameter (e.g. GET /items?cursor=n3xtp4g3). Choose HeaderCursorPaginator if:
The API docs explicitly say the next page token is returned in a header.
You see in responses a header value that looks like a pagination token (and not in the body).
The next request requires including that token (often as a query parameter named “cursor” or similar).
By default, this paginator expects a header named "next" (a generic placeholder) and will pass it as a "cursor" param​
dlthub.com
. In practice, you’ll usually override cursor_key to whatever header name the API uses (e.g., "NextPageToken" as in the example) while often leaving cursor_param="cursor" unless the API expects a differently named query parameter. Once configured, the HeaderCursorPaginator will extract the token from the response header and include it in the next request automatically​
dlthub.com
​
dlthub.com
.
Each of these paginator classes can be plugged into the RESTClient to handle API-specific pagination schemes. By examining an API’s documentation or its first response, you can determine which pattern (next URL in JSON, link headers, offsets, page numbers, or cursor tokens in JSON/headers) is being used and choose the corresponding paginator. This guide should help in mapping those patterns to the correct paginator class and using it correctly in Python code with DLT’s RESTClient. Always double-check the API’s response fields or headers to configure the paginator parameters appropriately (e.g., field names, header names, etc.), ensuring seamless traversal of all pages of data.
---

### 5. No Pagination

If an endpoint returns all results in a single call (e.g., fetching configuration data or a single item by ID), you don't need to specify a `paginator` for that resource. 